require 'rails_helper'

def login(user)
  post user_session_path, params: {
    user: {
      email: user.email, password: user.password
    }
  }
  follow_redirect!
end

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do

  
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  let(:photo_with_valid_attributes) { ActiveStorage::Blob.new(filename: 'foto', checksum: 'sadasd', content_type: 'image/jpeg', byte_size: 299946)}
  let(:user_with_valid_attributes) { User.new(first_name: 'Alex', birth: Date.new(1990,01,01), sex: 'Man', 
                                     latitude: 27.53037290421605, longitude: 53.905427341494146, 
                                     email: 'Ti@mail.ru', password: 'dsdfss') }
  let(:valid_attributes) { {first_name: 'Alex', birth: Date.new(1990,01,01), sex: 'Man', latitude: 27.53037290421605,
      longitude: 53.905427341494146, email: 'Ti@mail.ru', password: 'dsdfss'} }
  let(:invalid_attributes) { {first_name: ('Alexa' * 11), birth: Date.new(1990,01,01), sex: 'Man', latitude: 27.53037290421605,
      longitude: 53.905427341494146, email: 'Ti@mail.ru', password: 'dsdfss'} }

      describe "GET /index" do
    it "renders a successful response" do
      user = user_with_valid_attributes
      user.foto_blobs << photo_with_valid_attributes
      user.save
      get users_url(user)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      user = User.create!(valid_attributes)

      # login(user)
      # # user.foto_blobs << photo_with_valid_attributes
      # # user.save
      # login_as(user, scope: :user)
      # login(user)
      sign_in(user)
      get user_path(user)
      expect(response).to redirect_to(user_url(user))
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_user_registration_path
      expect(response).to be_successful
    end
  end

  describe "GET /matches" do
    it "renders a successful response" do
      user = user_with_valid_attributes
      user.foto_blobs << photo_with_valid_attributes
      user.save
      get matches_user_path(user)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      user = user_with_valid_attributes
      user.foto_blobs << photo_with_valid_attributes
      user.save
      get edit_user_registration_path(user)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post users_url, params: { user: valid_attributes }
        }.to change(User, :count).by(1)
      end

      it "redirects to the root page" do
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post users_url, params: { user: invalid_attributes }
        }.to change(User, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post users_url, params: { user: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { first_name: 'Oleg', birth: Date.new(1989,01,01), sex: 'Man', latitude: 25.53037290421605,
        longitude: 51.905427341494146, email: 'Titov@mail.ru', password: 'dsfsfsf'} }

      it "updates the requested user" do
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(response).to redirect_to(user_url(user))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        user = User.create! valid_attributes
        patch user_url(user), params: { user: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete user_url(user)
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete user_url(user)
      expect(response).to redirect_to(users_url)
    end
  end
end
